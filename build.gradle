import org.apache.tools.ant.filters.ReplaceTokens

plugins{
    id 'java-library'
}

def now_version = "0.1.1"

allprojects {
    apply {
        plugin 'java-library'
    }

    group = 'top.redstarmc.plugin.velocitytitle'

    version = now_version

    repositories {
        mavenCentral()  //Maven 存储库
        maven { url 'https://repo.codemc.io/repository/maven-releases/' }
    }

    dependencies {
        compileOnly 'org.jetbrains:annotations:23.0.0'
        implementation 'com.moandjiezana.toml:toml4j:0.7.2'
        implementation 'cc.carm.lib:easysql-hikaricp:0.4.7'
    }


    // 编译 固定 UTF-8 编码
    tasks.withType(JavaCompile).configureEach {
        options.encoding = "UTF-8"
    }
    // Javadoc 固定 UTF-8 编码
    tasks.withType(Javadoc).tap {
        configureEach {
            options.encoding = "UTF-8"
        }
    }

    // 固定使用 Java19
    java {
        toolchain.languageVersion.set(JavaLanguageVersion.of(19))
    }

    processResources {
        // 匹配所有资源文件
        filesMatching('**/*') {
            filter(ReplaceTokens, tokens: [encoding: 'UTF-8'])
            filter { Object line ->
                line.toString().replace('@VERSION@', project.version)
            }
        }
        filteringCharset = 'UTF-8'
    }

}

//subprojects {
//    tasks.withType(Jar).tap {
//        configureEach {
//            // 设置所有子模块 JAR 的输出根目录
//            destinationDirectory.set(rootProject.file("${rootProject.rootDir}/build/jars"))
//        }
//    }
//}

subprojects {
    // 1. 配置原始 Jar 任务（仅含自身代码，不加依赖）
    tasks.withType(Jar).tap {
        configureEach {
            group = 'build'
            destinationDirectory.set(rootProject.file("${rootProject.rootDir}/build/jars"))
            archiveClassifier.set('original') // 明确标记为原始 JAR（无依赖）

            // 仅包含自身代码和资源（不添加依赖）
            from sourceSets.main.output
        }
    }

    // 2. 配置包含依赖的 JAR 任务（xxx.jar）
    tasks.register('jarWithDependencies', Jar) {
        group = 'build'
        destinationDirectory.set(rootProject.file("${rootProject.rootDir}/build/jars"))
        archiveBaseName.set(jar.archiveBaseName)
        archiveClassifier.set('')

        from {
            sourceSets.main.output // 包含当前模块的代码和资源
        }

        // 收集外部依赖（排除项目内的 original.jar）
        from {
            configurations.runtimeClasspath.collect { file ->
                // 排除项目内生成的 original.jar（避免重复打包）
                if (file.name.endsWith("-original.jar")) {
                    null // 跳过 original.jar
                } else {
                    file.isDirectory() ? file : zipTree(file)
                }
            }.findAll { it != null } // 过滤掉 null 值
        }

        exclude 'META-INF/*', '*.MF'
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    }

    // 3. 确保 build 任务同时执行两个 JAR 任务
    tasks.named('build') {
        dependsOn(tasks.named('jar'), tasks.named('jarWithDependencies'))
    }
}

tasks.register('createAllJar', Jar) {
    group = 'build'

    archiveBaseName.set('VelocityTitle')
    archiveVersion.set(now_version)

    // 收集所有子模块的类文件和资源文件
    from {
        subprojects.collect { subproject ->
            [subproject.file("build/classes/java/main"),
             subproject.file("build/resources/main")].findAll { it != null && it.exists() }
        }
    }

    // 收集所有子模块的依赖
    from {
        subprojects.collectMany { subproject ->
            subproject.configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
        }
    }

    exclude 'META-INF/*', '*.MF'
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    destinationDirectory.set(rootProject.file("${rootProject.rootDir}/build/jars"))

    // 添加对子模块构建任务的依赖
    subprojects.each { project ->
        dependsOn project.tasks.named('build')
    }
}

tasks.named('build') {
    finalizedBy('createAllJar')
}
