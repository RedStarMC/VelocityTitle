plugins{
    id 'java-library'
}

def now_version = "0.1.1"

allprojects {
    apply {
        plugin 'java-library'
    }

    group = 'top.redstarmc.plugin.velocitytitle'

    version = now_version

    repositories {
        mavenCentral()  //Maven 存储库
    }

    dependencies {
        compileOnly 'org.jetbrains:annotations:23.0.0'
        implementation 'com.moandjiezana.toml:toml4j:0.7.2'
    }


    // 编译 固定 UTF-8 编码
    tasks.withType(JavaCompile).configureEach {
        options.encoding = "UTF-8"
    }
    // Javadoc 固定 UTF-8 编码
    tasks.withType(Javadoc).tap {
        configureEach {
            options.encoding = "UTF-8"
        }
    }

    // 固定使用 Java19
    java {
        toolchain.languageVersion.set(JavaLanguageVersion.of(19))
    }

}

//subprojects {
//    tasks.withType(Jar).tap {
//        configureEach {
//            // 设置所有子模块 JAR 的输出根目录
//            destinationDirectory.set(rootProject.file("${rootProject.rootDir}/build/jars"))
//        }
//    }
//}

subprojects {
    // 统一设置子模块 JAR 的输出目录
    tasks.withType(Jar).tap {
        configureEach {
            destinationDirectory.set(rootProject.file("${rootProject.rootDir}/build/jars"))
            archiveClassifier.set('original') // 给原始 JAR 加分类器以便区分
        }
    }

    // 为每个子模块新增一个包含依赖的 JAR 任务
    tasks.register('jarWithDependencies', Jar) {
        group = 'build'

        // 设置输出目录
        destinationDirectory.set(rootProject.file("${rootProject.rootDir}/build/jars"))
        archiveBaseName.set(jar.archiveBaseName)

        from {
            sourceSets.main.output
        }

        archiveClassifier.set('')

        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }.each {
            from(it) {
                exclude 'META-INF/*', '*.MF'
            }
        }

        duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    }

    tasks.named('build') {
        dependsOn('jarWithDependencies')
    }
}

tasks.register('createAllJar', Jar) {
    group = 'build'

    archiveBaseName.set('VelocityTitle')
    archiveVersion.set(now_version)

    // 收集所有子模块的类文件和资源文件
    from {
        subprojects.collectMany { subproject ->
            [
                    subproject.sourceSets.main.output.classesDirs.files,
                    subproject.sourceSets.main.output.resourcesDir
            ].flatten().findAll { it != null && it.exists() }
        }
    }

    // 收集所有子模块的依赖
    from {
        subprojects.collectMany { subproject ->
            subproject.configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
        }
    }

    exclude 'META-INF/*', '*.MF'
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    destinationDirectory.set(rootProject.file("${rootProject.rootDir}/build/jars"))
}

tasks.named('build') {
    finalizedBy('createAllJar')
}
