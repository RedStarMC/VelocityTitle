import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id 'java-library'
}

def now_version = "1.0.0"

allprojects {
    apply {
        plugin 'java-library'
    }
    
    group = 'org.example.flashytitles'
    version = now_version

    // 作者信息
    ext.author = 'maple'
    
    repositories {
        mavenCentral()
        // Velocity 仓库
        maven {
            name = 'velocity'
            url = 'https://nexus.velocitypowered.com/repository/maven-public/'
        }
        // PaperMC 仓库
        maven {
            name = 'papermc'
            url = 'https://repo.papermc.io/repository/maven-public/'
        }
        // 阿里云镜像
        maven { url = 'https://maven.aliyun.com/repository/central' }
        maven { url = 'https://maven.aliyun.com/repository/public' }
    }
    
    dependencies {
        compileOnly 'org.jetbrains:annotations:24.0.1'
        implementation 'com.google.code.gson:gson:2.10.1'
        implementation 'com.zaxxer:HikariCP:5.0.1'
        implementation 'mysql:mysql-connector-java:8.0.33'
        implementation 'org.xerial:sqlite-jdbc:3.42.0.0'
        // H2 数据库 (默认使用)
        implementation 'com.h2database:h2:2.2.224'
    }
    
    // 编译 固定 UTF-8 编码
    tasks.withType(JavaCompile).configureEach {
        options.encoding = "UTF-8"
        options.release = 17
    }
    
    // Javadoc 固定 UTF-8 编码
    tasks.withType(Javadoc).tap {
        configureEach {
            options.encoding = "UTF-8"
        }
    }
    
    // 固定使用 Java 17
    java {
        toolchain.languageVersion.set(JavaLanguageVersion.of(17))
    }
    
    processResources {
        filesMatching('**/*') {
            filter(ReplaceTokens, tokens: [encoding: 'UTF-8'])
            filter { Object line ->
                line.toString().replace('@VERSION@', project.version)
            }
        }
        filteringCharset = 'UTF-8'
    }
}

subprojects {
    // 1. 配置原始 Jar 任务
    tasks.withType(Jar).tap {
        configureEach {
            group = 'build'
            destinationDirectory.set(rootProject.file("${rootProject.rootDir}/build/jars"))
            archiveClassifier.set('original')
            duplicatesStrategy = DuplicatesStrategy.EXCLUDE

            from sourceSets.main.output

            // 对velocity、spigot、fabric、neoforge模块添加core代码
            if (project.name in ['velocity', 'spigot', 'fabric', 'neoforge']) {
                from project(':core').sourceSets.main.output
            }
        }
    }
    
    // 2. 配置包含依赖的 JAR 任务
    tasks.register('jarWithDependencies', Jar) {
        group = 'build'
        destinationDirectory.set(rootProject.file("${rootProject.rootDir}/build/jars"))
        archiveBaseName.set(jar.archiveBaseName)
        archiveClassifier.set('')
        
        from {
            sourceSets.main.output
            
            if (project.name in ['velocity', 'spigot', 'fabric', 'neoforge']) {
                project(':core').sourceSets.main.output
            }
        }
        
        from {
            configurations.runtimeClasspath.collect { file ->
                if (file.name.endsWith("-original.jar")) {
                    null
                } else {
                    file.isDirectory() ? file : zipTree(file)
                }
            }.findAll { it != null }
        }
        
        exclude 'META-INF/*', '*.MF'
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    }
    
    // 3. 确保 build 任务同时执行两个 JAR 任务
    tasks.named('build') {
        dependsOn(tasks.named('jar'), tasks.named('jarWithDependencies'))
    }
}

tasks.register('createAllJar', Jar) {
    group = 'build'
    archiveBaseName.set('FlashyTitles-Complete')
    archiveVersion.set(now_version)
    
    from {
        subprojects.collect { subproject ->
            [subproject.file("build/classes/java/main"), 
             subproject.file("build/resources/main")].findAll { 
                it != null && it.exists() 
            }
        }
    }
    
    from {
        subprojects.collectMany { subproject ->
            subproject.configurations.runtimeClasspath.collect { 
                it.isDirectory() ? it : zipTree(it) 
            }
        }
    }
    
    exclude 'META-INF/*', '*.MF'
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    destinationDirectory.set(rootProject.file("${rootProject.rootDir}/build/jars"))
    
    subprojects.each { project ->
        dependsOn project.tasks.named('build')
    }
}

tasks.named('build') {
    finalizedBy('createAllJar')
}
